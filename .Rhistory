eresponse_05 = c("911 Call", "911 Call", "911 Call", "911 Call", "911 Call"),
esituation_11 = c("Respiratory Distress", "Respiratory Distress", "Chest Pain", "Respiratory Distress", "Respiratory Distress"),
esituation_12 = c("Asthma", "Asthma", "Not Asthma", "Asthma", "Asthma"),
emedications_03 = c("Albuterol", "Albuterol", "Epinephrine", "None", "Albuterol")
),
erecord_01_col = erecord_01,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
)
testthat::test_that("asthma_01 produces expected results", {
# Synthetic test data
test_data <- tibble::tibble(
erecord_01 = c("R1", "R2", "R3", "R4", "R5"),
epatient_15 = c(34, 5, 45, 2, 60),  # Ages
epatient_16 = c("Years", "Years", "Years", "Months", "Years"),
eresponse_05 = c("911 Call", "911 Call", "911 Call", "911 Call", "911 Call"),
esituation_11 = c("Respiratory Distress", "Respiratory Distress", "Chest Pain", "Respiratory Distress", "Respiratory Distress"),
esituation_12 = c("Asthma", "Asthma", "Not Asthma", "Asthma", "Asthma"),
emedications_03 = c("Albuterol", "Albuterol", "Epinephrine", "None", "Albuterol")
)
# Run function
result <- asthma_01(
df = test_data,
erecord_01_col = erecord_01,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
)
# Check structure
testthat::expect_s3_class(result, "data.frame")
testthat::expect_true(all(c("measure", "pop", "numerator", "denominator", "prop", "prop_label") %in% names(result)))
# Check calculations
testthat::expect_equal(sum(result$numerator), 0)  # Three cases had Albuterol
testthat::expect_equal(sum(result$denominator), 0)  # Four cases met inclusion criteria
testthat::expect_equal(result$prop[result$pop == "All"], 0)
testthat::expect_equal(nrow(result), 3)
})
testthat::test_that("asthma_01 handles missing data correctly", {
missing_data <- tibble::tibble(
erecord_01 = c("R1", "R2"),
epatient_15 = c(NA, 30),
epatient_16 = c("Years", NA),
eresponse_05 = c("911 Call", "911 Call"),
esituation_11 = c("Respiratory Distress", "Respiratory Distress"),
esituation_12 = c("Asthma", "Asthma"),
emedications_03 = c(NA, "Albuterol")
)
result <- asthma_01(
df = missing_data,
erecord_01_col = erecord_01,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
)
testthat::expect_true(nrow(result) > 0)
testthat::expect_true(all(!is.na(result$denominator)))
})
testthat::test_that("asthma_01 returns empty result for non-matching criteria", {
non_matching_data <- tibble::tibble(
erecord_01 = c("R1", "R2"),
epatient_15 = c(30, 50),
epatient_16 = c("Years", "Years"),
eresponse_05 = c("Non-911 Call", "Non-911 Call"),
esituation_11 = c("Non-Respiratory", "Non-Respiratory"),
esituation_12 = c("Not Asthma", "Not Asthma"),
emedications_03 = c("None", "None")
)
result <- asthma_01(
df = non_matching_data,
erecord_01_col = erecord_01,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
)
testthat::expect_equal(sum(result$denominator), 0)
})
devtools::test_coverage_active_file()
usethis::use_test()
testthat::test_that("asthma_01_population rejects invalid argument combinations", {
testthat::expect_error(nemsqar::asthma_01_population(df = tibble::tibble(), patient_scene_table = tibble::tibble()),
"Please choose to either pass an object of class")
testthat::expect_error(nemsqar::asthma_01_population(),
"Please choose to either pass an object of class")
})
testthat::test_that("asthma_01_population rejects invalid argument combinations", {
testthat::expect_error(nemsqar::asthma_01_population(df = tibble::tibble(), patient_scene_table = tibble::tibble()),
"Please choose to either pass an object of class")
testthat::expect_error(nemsqar::asthma_01_population(),
"Please choose to either pass an object of class")
})
testthat::test_that("asthma_01_population rejects missing required column arguments", {
testthat::expect_error(nemsqar::asthma_01_population(df = tibble::tibble(), epatient_15_col = "Age"),
"One or more of the \\*_col arguments is missing")
})
testthat::test_that("asthma_01_population rejects non-dataframe inputs", {
testthat::expect_error(nemsqar::asthma_01_population(df = list()),
"were not of class {.cls data.frame} nor {.cls tibble}")
testthat::expect_error(nemsqar::asthma_01_population(patient_scene_table = matrix()),
"were not of class {.cls data.frame} nor {.cls tibble}")
})
testthat::expect_error(nemsqar::asthma_01_population(df = list()),
"were not of class")
testthat::test_that("asthma_01_population rejects non-dataframe inputs", {
testthat::expect_error(nemsqar::asthma_01_population(df = list()),
"one or more")
testthat::expect_error(nemsqar::asthma_01_population(patient_scene_table = matrix()),
"one or more")
})
testthat::test_that("asthma_01_population rejects non-dataframe inputs", {
testthat::expect_error(nemsqar::asthma_01_population(df = list()),
"One or more")
testthat::expect_error(nemsqar::asthma_01_population(patient_scene_table = matrix()),
"One or more")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(incident_date = as.character(Sys.Date()), patient_dob = as.character(Sys.Date() - 365))
testthat::expect_error(nemsqar::asthma_01_population(df, incident_date_col = incident_date, patient_dob_col = patient_dob),
"one or both of these variables were not of class {.cls Date}")
})
testthat::expect_error(nemsqar::asthma_01_population(df, incident_date_col = incident_date, patient_dob_col = patient_dob),
"one or both of these variables were not of class")
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(incident_date = as.character(Sys.Date()), patient_dob = as.character(Sys.Date() - 365))
testthat::expect_error(nemsqar::asthma_01_population(df, incident_date_col = incident_date, patient_dob_col = patient_dob),
"one or both of these variables were not of class")
})
testthat::test_that("asthma_01_population correctly classifies patient age", {
df <- tibble::tibble(
erecord_01 = 1:3,
incident_date = as.Date("2025-01-01"),
patient_dob = as.Date(c("2000-01-01", "2020-01-01", "2023-01-01")),
epatient_15 = c(25, 5, 2),
epatient_16 = c("years", "years", "months")
)
result <- nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = "dummy",
esituation_11_col = "dummy",
esituation_12_col = "dummy",
emedications_03_col = "dummy")
testthat::expect_true(all(result$system_age_adult == c(TRUE, FALSE, FALSE)))
testthat::expect_true(all(result$system_age_minor == c(FALSE, TRUE, TRUE)))
})
testthat::test_that("asthma_01_population rejects missing required column arguments", {
testthat::expect_error(nemsqar::asthma_01_population(df = tibble::tibble(), epatient_15_col = "Age"),
"One or more of the \\*_col arguments is missing")
})
testthat::test_that("asthma_01_population rejects non-dataframe inputs", {
testthat::expect_error(nemsqar::asthma_01_population(df = list()),
"One or more")
testthat::expect_error(nemsqar::asthma_01_population(patient_scene_table = matrix()),
"One or more")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(incident_date = as.character(Sys.Date()), patient_dob = as.character(Sys.Date() - 365))
testthat::expect_error(nemsqar::asthma_01_population(df, incident_date_col = incident_date, patient_dob_col = patient_dob),
"one or both of these variables were not of class")
})
args(asthma_01)
testthat::test_that("asthma_01_population rejects missing required column arguments", {
testthat::expect_error(nemsqar::asthma_01_population(df = tibble::tibble(), epatient_15_col = "Age"),
"One or more of the \\*_col arguments is missing")
})
testthat::test_that("asthma_01_population rejects non-dataframe inputs", {
testthat::expect_error(nemsqar::asthma_01_population(df = list()),
"One or more")
testthat::expect_error(nemsqar::asthma_01_population(patient_scene_table = matrix()),
"One or more")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(incident_date = as.character(Sys.Date()), patient_dob = as.character(Sys.Date() - 365))
testthat::expect_error(nemsqar::asthma_01_population(df, incident_date_col = incident_date, patient_dob_col = patient_dob),
"one or both of these variables were not of class")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(incident_date = as.character(Sys.Date()),
patient_dob = as.character(Sys.Date() - 365)
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col,
epatient_16_col,
eresponse_05_col,
esituation_11_col,
esituation_12_col,
emedications_03_col),
"one or both of these variables were not of class")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(incident_date = as.character(Sys.Date()),
patient_dob = as.character(Sys.Date() - 365)
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col,
epatient_16_col,
eresponse_05_col,
esituation_11_col,
esituation_12_col,
emedications_03_col),
"one or both of these variables were not of class")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(incident_date = as.character(Sys.Date()),
patient_dob = as.character(Sys.Date() - 365)
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col,
epatient_16_col,
eresponse_05_col,
esituation_11_col,
esituation_12_col,
emedications_03_col),
"not found")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(erecord_01 = character(),
incident_date = as.character(Sys.Date()),
patient_dob = as.character(Sys.Date() - 365),
epatient_15_col = numeric(),
epatient_16_col = character(),
eresponse_05_col = character(),
esituation_11_col = character(),
esituation_12_col = character(),
emedications_03_col = character()
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col,
epatient_16_col,
eresponse_05_col,
esituation_11_col,
esituation_12_col,
emedications_03_col
))
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(erecord_01 = character(),
incident_date = as.character(Sys.Date()),
patient_dob = as.character(Sys.Date() - 365),
epatient_15_col = numeric(),
epatient_16_col = character(),
eresponse_05_col = character(),
esituation_11_col = character(),
esituation_12_col = character(),
emedications_03_col = character()
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col,
epatient_16_col,
eresponse_05_col,
esituation_11_col,
esituation_12_col,
emedications_03_col
), "not found")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(erecord_01 = character(),
incident_date = as.character(Sys.Date()),
patient_dob = as.character(Sys.Date() - 365),
epatient_15_col = numeric(),
epatient_16_col = character(),
eresponse_05_col = character(),
esituation_11_col = character(),
esituation_12_col = character(),
emedications_03_col = character()
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col,
epatient_16_col,
eresponse_05_col,
esituation_11_col,
esituation_12_col,
emedications_03_col
), "argument")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(erecord_01 = character(),
incident_date = as.character(Sys.Date()),
patient_dob = as.character(Sys.Date() - 365),
epatient_15 = numeric(),
epatient_16 = character(),
eresponse_05 = character(),
esituation_11 = character(),
esituation_12 = character(),
emedications_03 = character()
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
), "argument")
})
testthat::test_that("asthma_01_population validates date column formats", {
df <- tibble::tibble(erecord_01 = character(),
incident_date = as.character(Sys.Date()),
patient_dob = as.character(Sys.Date() - 365),
epatient_15 = numeric(),
epatient_16 = character(),
eresponse_05 = character(),
esituation_11 = character(),
esituation_12 = character(),
emedications_03 = character()
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
), "one or both")
})
testthat::test_that("asthma_01_population correctly classifies patient age", {
df <- tibble::tibble(
erecord_01 = 1:3,
incident_date = as.Date(c("2025-01-01", "2025-01-05", "2025-02-01")),
patient_dob = as.Date(c("2000-01-01", "2020-01-01", "2023-01-01")),
epatient_15 = c(25, 5, 2),
epatient_16 = c("years", "years", "months")
)
result <- nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = "dummy",
esituation_11_col = "dummy",
esituation_12_col = "dummy",
emedications_03_col = "dummy")
testthat::expect_true(all(result$system_age_adult == c(TRUE, FALSE, FALSE)))
testthat::expect_true(all(result$system_age_minor == c(FALSE, TRUE, TRUE)))
})
testthat::test_that("asthma_01_population fails with unknown columns", {
df <- tibble::tibble(
erecord_01 = 1:3,
incident_date = as.Date(c("2025-01-01", "2025-01-05", "2025-02-01")),
patient_dob = as.Date(c("2000-01-01", "2020-01-01", "2023-01-01")),
epatient_15 = c(25, 5, 2),
epatient_16 = c("years", "years", "months"),
eresponse_05 = character(),
esituation_11 = character(),
esituation_12 = character(),
emedications_03 = character()
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = "dummy",
esituation_11_col = "dummy",
esituation_12_col = "dummy",
emedications_03_col = "dummy"), "exist")
})
testthat::test_that("asthma_01_population fails with unknown columns", {
df <- tibble::tibble(
erecord_01 = 1:3,
incident_date = as.Date(c("2025-01-01", "2025-01-05", "2025-02-01")),
patient_dob = as.Date(c("2000-01-01", "2020-01-01", "2023-01-01")),
epatient_15 = c(25, 5, 2),
epatient_16 = c("years", "years", "months"),
eresponse_05 = c("911", "911", "911"),
esituation_11 = c("weakness", "asthma", "bronchospasm"),
esituation_12 = c("asthma", "weakness", "weakness"),
emedications_03 = c("albuterol", "levalbuterol", "metaproterenol")
)
testthat::expect_error(nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = "dummy",
esituation_11_col = "dummy",
esituation_12_col = "dummy",
emedications_03_col = "dummy"), "exist")
})
names(airway_population_18_table$adults)
testthat::test_that("asthma_01_population correctly classifies patient age", {
df <- tibble::tibble(
erecord_01 = 1:3,
incident_date = as.Date(c("2025-01-01", "2025-01-05", "2025-02-01")),
patient_dob = as.Date(c("2000-01-01", "2020-01-01", "2023-01-01")),
epatient_15 = c(25, 5, 2),
epatient_16 = c("years", "years", "months"),
eresponse_05 = c("911", "911", "911"),
esituation_11 = c("weakness", "asthma", "bronchospasm"),
esituation_12 = c("asthma", "weakness", "weakness"),
emedications_03 = c("albuterol", "levalbuterol", "metaproterenol")
)
result <- nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
)
testthat::expect_true(all(result$adults$system_age_adult == TRUE))
testthat::expect_true(all(result$adults$system_age_minor == FALSE))
})
airway_population_18_table$filter_process
testthat::test_that("asthma_01_population correctly filters 911 calls", {
df <- tibble::tibble(
erecord_01 = 1:3,
incident_date = as.Date(c("2025-01-01", "2025-01-05", "2025-02-01")),
patient_dob = as.Date(c("2000-01-01", "2020-01-01", "2023-01-01")),
epatient_15 = c(25, 5, 2),
epatient_16 = c("years", "years", "months"),
eresponse_05 = c("2205001", "2205009", "2205003"),
esituation_11 = c("weakness", "asthma", "bronchospasm"),
esituation_12 = c("asthma", "weakness", "weakness"),
emedications_03 = c("albuterol", "levalbuterol", "metaproterenol")
)
result <- nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
)
emergency_calls <- result$filter_process |>
dplyr::filter(filter == "911 calls") |>
dplyr::pull(count)
testthat::expect_equal(nrow(result$filter_process), 7)
testthat::expect_equal(emergency_calls, 3)
testthat::expect_false()
testthat::expect_false(4 %in% result$call_911_data)
})
testthat::test_that("asthma_01_population correctly filters 911 calls", {
df <- tibble::tibble(
erecord_01 = 1:3,
incident_date = as.Date(c("2025-01-01", "2025-01-05", "2025-02-01")),
patient_dob = as.Date(c("2000-01-01", "2020-01-01", "2023-01-01")),
epatient_15 = c(25, 5, 2),
epatient_16 = c("years", "years", "months"),
eresponse_05 = c("2205001", "2205009", "2205003"),
esituation_11 = c("weakness", "asthma", "bronchospasm"),
esituation_12 = c("asthma", "weakness", "weakness"),
emedications_03 = c("albuterol", "levalbuterol", "metaproterenol")
)
result <- nemsqar::asthma_01_population(df,
erecord_01_col = erecord_01,
incident_date_col = incident_date,
patient_dob_col = patient_dob,
epatient_15_col = epatient_15,
epatient_16_col = epatient_16,
eresponse_05_col = eresponse_05,
esituation_11_col = esituation_11,
esituation_12_col = esituation_12,
emedications_03_col = emedications_03
)
emergency_calls <- result$filter_process |>
dplyr::filter(filter == "911 calls") |>
dplyr::pull(count)
testthat::expect_equal(nrow(result$filter_process), 7)
testthat::expect_equal(emergency_calls, 3)
})
devtools::test_coverage_active_file()
devtools::test_coverage()
devtools::test()
